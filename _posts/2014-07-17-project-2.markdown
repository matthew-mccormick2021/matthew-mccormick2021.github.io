---
layout: default
modal-id: 5
date: 2014-11-09
img: Airfoil.png
alt: image-alt
project-date: November 2023
client: MAE 3303 Compressible Flow
category: Airfoil Design (MatLab)
description: 
The aim of this project is to optimize the lift to drag ratio, L/D, of a biconvex airfoil in supersonic flow with a free stream Mach number of 3.0. This design 
must maintain the constraints of having a pitching moment coefficient about the leading edge of 0.1 magnitude, while also achieving a minimal lift coefficient of 
0.3. The structural criteria of the airfoil must also adhere to the thickness constraints of minimum total thickness of upper and lower surface being at least 10% 
of the chord. 
The design optimization finds the solution that has the best performance while satisfying the given constraints through a process that is both 
systematic and efficient. In this project in particular, an exhaustive search method was leveraged, dividing each of the design variables within a chosen range 
and then nested loop through all elements. Within this loop the airfoils upper and lower surfaces are constructed to calculate the aerodynamic coefficients, 
checking if all design constraints are met. Using this method, the code is able to examine every possible combination of the design parameters, which in term 
ensures that the best solution will be found, however this does have a high computational cost and will take quite a while to complete. 
To start, the multiple variables and parameters of the problem are defined. Mach number is set to 3.0, chord length is set to 1, the normalized length of the 
chord, and the number of segments is set to 30 for both upper and lower surface providing a good balance between accuracy and computational efficiency. Alpha 
(angle of attack) is given a range of 0 to 10 with step increments of 0.1, given in code by “alpha_range = 0:0.1:10”. Upper and lower thickness is given a range 
of 0.00 to 0.1 with increments of 0.01, this seems to be an ideal range as it allows for the total thickness to sum to 0.1, or 10% of the chord length, while 
still being within normal supersonic airfoil thickness, i.e. not looping through cases where L/D would obviously not be optimized. The location along the x-axis 
where the max surface thickness occurs is also set within the bounds of 1/3 to 2/3 of the chord length, also with increments of 0.1. This is the division of the 
design variables into ranges, as outlined in the exhaustive search outline. The constraints are also set to their respective values, minimum thickness as 0.1, 
minimum lift coefficient as 0.3, and maximum moment about the leading edge as 0.1. 
For my code I store the results using “results = [];” which initializes an empty array, or matrix named results, tha will eventually contain rows of data 
representing one feasible design. By doing so I ensure that the program has a clean slate to store all qualifying designs found in the search. 
Before I begin the exhaustive search I first filter through possible combinations of upper and lower thickness that will meet the total thickness constraint. This 
is done using and if, continue, end statement. If the upper and lower thickness is less than the minimum thickness requirement, end, otherwise continue. This 
saves a lot of computational time by ruling out possible combinations that would not meet the thickness constraints. Next, I begin the exhaustive search and 
nested looping by first generating the geometry of the airfoil. For the xaxis components of the upper and lower surfaces, determined using “linspace(0, chord, 
nsu+1)”, generating a series of equally spaced points from zero to the length of the code, where Nsu+1 generates the total number of points generated. For these 
values of x coordinates the y coordinates are computed using the equation given in equation 1. For the different angle of attacks, I run the given function, 
clcdcms, as mentioned in the project definition. This function pulls from the other values already done before the loop, in the case of upper and lower thickness 
as well as the number of segments on each surface, and those done with the loop, such as the x and y coordinates of the points of the upper and lower surfaces. 
This program outputs the values of the lift, drag, pressure, and moment coefficients, as well as computing the upper and lower thickness and where they occur on 
the x-axis. From the coefficients of lift and drag, the lift to drag ratio can be calculated for each feasible design, by dividing lift coefficients by the drag 
coefficient. The last loop checks that the aerodynamic performance properties meet the required constraints, if they do the results are stored in the results 
array that was initialized earlier in the program. Finally, a series of end commands are used to stop each loop. 
This next section of the code focuses on identifying, displaying and plotting the best airfoil configurations based on lift to drag ratio among the feasible 
designs. First the results array is checked to ensure that there were feasible designs that were stored. If there are feasible designs stored, it then sorts 
through to find the design with the highest lift to drag ratio. Then the inputs from this design are stored as “best_idx” in the best airfoil array. With the best 
airfoil array the code generates the x and y coordinates that define its shape. This is possible by using linspace again to define upper and lower x coordinates, 
and then calculating the y coordinates of both surfaces from equation 1 and the thickness values. Proper alignment is ensured by setting the y values of x = 0 and 
x = 1 to zero. Next the code recalculates the aerodynamic coefficients from the best airfoil array input values. Once calculated, it displays  a summary of the 
best airfoils output along with surface thickness, thickness x-axis locations, angle of attack, and lift to drag ratio. Lastly the geometry of the airfoil is 
plotted from the shape calculated as mentioned above. The graph includes axis titles and color coordination for both surfaces to provide a visual representation 
of the optimal airfoil. The last section of code performs post processing on the aerodynamic data stored in the results array. First it sets a threshold for lift 
to drag ratio, anything with positive lift to drag will be considered in the filtered results. The precision is also set to 2, this allows larger groupings of 
different ratios to be combined as there was not a significant change. The code then loops through each row of the results array, adding the rounded value to a 
list of unique lifts to drag ratios. It then adds that entire row from the results array to the filtered results array. This ensures that repetitive ratios are 
not displayed. Once the filtering is complete the code rounds the coefficients of lift, drag, and moments to 3 decimal places and the lift to drag ratio to 2 
decimals, converting the filtered results array into a table with clearly labeled columns for easier viewing. Finally, the table is saved as an Excel worksheet 
for ease of importing into the report. 
Running the optimazation code for the given parameters and restraints resulted in an airfoil with an angle of attack of 9.7, upper and lower thickness of 0.02 and 
0.08 respectively. The x-axis locations of these thickness were 0.60 for the upper and 0.53 for the lower. Lift, drag, and moment coefficients were as follows, 
0.3002, 0.0916, and 0.0996 nose down, resulting in a lift to drag ratio of 3.28.
---
